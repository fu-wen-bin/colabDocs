<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/colab-docs/src/Editor.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/colab-docs/src/Editor.tsx" />
              <option name="originalContent" value="import './editor.css'&#10;import {&#10;  SimpleEditor,&#10;} from './components/tiptap-templates/simple/simple-editor'&#10;import TableOfContents from './components/TableOfContents'&#10;import { useState } from 'react'&#10;import { Editor as TiptapEditor } from '@tiptap/react'&#10;&#10;interface EditorProps {&#10;  isTocVisible?: boolean; // 从外部传入目录可见性状态&#10;  onEditorReady?: (editor: TiptapEditor) =&gt; void; // 将编辑器实例传递给父组件&#10;  documentId?: string; // 新增：协作文档ID&#10;}&#10;&#10;export default function Editor ({&#10;                                  isTocVisible = false,&#10;                                  onEditorReady,&#10;                                  documentId = 'example-doc', // 新增：默认文档ID&#10;                                }: EditorProps) {&#10;  const [editor, setEditor] = useState&lt;TiptapEditor | null&gt;(null)&#10;&#10;  // 将编辑器实例传递给父组件&#10;  const handleEditorReady = (editor: TiptapEditor) =&gt; {&#10;    setEditor(editor)&#10;    if (onEditorReady) {&#10;      onEditorReady(editor)&#10;    }&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;flex h-full w-full relative&quot;&gt;&#10;      {/* 左侧目录栏 */}&#10;      &lt;div&#10;        className={`toc-sidebar h-full overflow-y-auto border-r border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 transition-all duration-300 ${&#10;          isTocVisible ? 'w-64' : 'w-0'&#10;        }`}&#10;      &gt;&#10;        {isTocVisible &amp;&amp; &lt;TableOfContents editor={editor}/&gt;}&#10;      &lt;/div&gt;&#10;&#10;      {/* 编辑器区域 */}&#10;      &lt;div className=&quot;flex-1 overflow-x-auto&quot;&gt;&#10;        &lt;div&#10;          className=&quot;editor-container&quot;&#10;          style={{&#10;            maxWidth: '100%',&#10;            width: '100%',&#10;            margin: '0 auto',&#10;            height: '100%',&#10;            padding: '0', // 移除内联的左右内边距&#10;          }}&#10;        &gt;&#10;          &lt;SimpleEditor&#10;            onEditorReady={handleEditorReady}&#10;            showToolbar={false} // 禁用编辑器内部的工具栏&#10;            documentId={documentId} // 新增：传递协作文档ID&#10;          /&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}" />
              <option name="updatedContent" value="import './editor.css'&#10;import {&#10;  SimpleEditor,&#10;} from './components/tiptap-templates/simple/simple-editor'&#10;import TableOfContents from './components/TableOfContents'&#10;import { useState } from 'react'&#10;import { Editor as TiptapEditor } from '@tiptap/react'&#10;&#10;interface EditorProps {&#10;  isTocVisible?: boolean; // 从外部传入目录可见性状态&#10;  onEditorReady?: (editor: TiptapEditor) =&gt; void; // 将编辑器实例传递给父组件&#10;  documentId?: string; // 新增：协作文档ID&#10;}&#10;&#10;export default function Editor ({&#10;                                  isTocVisible = false,&#10;                                  onEditorReady,&#10;                                  documentId = 'example-doc', // 新增：默认文档ID&#10;                                }: EditorProps) {&#10;  const [editor, setEditor] = useState&lt;TiptapEditor | null&gt;(null)&#10;&#10;  // 将编辑器实例传递给父组件&#10;  const handleEditorReady = (editor: TiptapEditor) =&gt; {&#10;    setEditor(editor)&#10;    if (onEditorReady) {&#10;      onEditorReady(editor)&#10;    }&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;flex h-full w-full relative&quot;&gt;&#10;      {/* 左侧目录栏 */}&#10;      &lt;div&#10;        className={`toc-sidebar h-full overflow-y-auto border-r border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-900 transition-all duration-300 ${&#10;          isTocVisible ? 'w-64' : 'w-0'&#10;        }`}&#10;      &gt;&#10;        {isTocVisible &amp;&amp; &lt;TableOfContents editor={editor}/&gt;}&#10;      &lt;/div&gt;&#10;&#10;      {/* 编辑器区域 */}&#10;      &lt;div className=&quot;flex-1 overflow-x-auto&quot;&gt;&#10;        &lt;div&#10;          className=&quot;editor-container&quot;&#10;          style={{&#10;            maxWidth: '100%',&#10;            width: '100%',&#10;            margin: '0 auto',&#10;            height: '100%',&#10;            padding: '0', // 移除内联的左右内边距&#10;          }}&#10;        &gt;&#10;          &lt;SimpleEditor&#10;            onEditorReady={handleEditorReady}&#10;            showToolbar={false} // 禁用编辑器内部的工具栏&#10;            documentId={documentId} // 新增：传递协作文档ID&#10;          /&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/colab-docs/src/components/Button.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/colab-docs/src/components/Button.css" />
              <option name="updatedContent" value=".button {&#10;  background-color: #3b82f6;&#10;  color: #eff6ff;&#10;  padding: 0.5rem 1rem;&#10;  border-radius: 0.375rem;&#10;  transition: color 0.2s;&#10;}&#10;&#10;/* 确保:hover选择器位于.button之后，提高特异性 */&#10;.button:hover {&#10;  color: #22c55e; /* 绿色 */&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/colab-docs/src/components/Button.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/colab-docs/src/components/Button.tsx" />
              <option name="updatedContent" value="import React from 'react';&#10;&#10;interface ButtonProps {&#10;  children: React.ReactNode;&#10;  className?: string;&#10;  onClick?: () =&gt; void;&#10;}&#10;&#10;export default function Button({ children, className = '', onClick }: ButtonProps) {&#10;  // 添加hover:text-green-500类来实现悬浮时文字变绿&#10;  return (&#10;    &lt;button &#10;      className={`bg-blue-500 text-blue-50 px-4 py-2 rounded-md hover:text-green-500 transition-colors ${className}`}&#10;      onClick={onClick}&#10;    &gt;&#10;      {children}&#10;    &lt;/button&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/colab-docs/src/components/StyledButton.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/colab-docs/src/components/StyledButton.tsx" />
              <option name="updatedContent" value="import styled from 'styled-components';&#10;&#10;const StyledButton = styled.button`&#10;  background-color: #3b82f6;&#10;  color: #eff6ff;&#10;  padding: 0.5rem 1rem;&#10;  border-radius: 0.375rem;&#10;  transition: color 0.2s;&#10;  &#10;  &amp;:hover {&#10;    color: #22c55e; /* 绿色 */&#10;  }&#10;`;&#10;&#10;export default StyledButton;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/colab-docs/src/components/TableOfContents/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/colab-docs/src/components/TableOfContents/index.tsx" />
              <option name="originalContent" value="import React, { useEffect, useState } from 'react';&#10;import { Editor } from '@tiptap/react';&#10;&#10;interface TocItem {&#10;  id: string;&#10;  level: number;&#10;  text: string;&#10;}&#10;&#10;interface TableOfContentsProps {&#10;  editor: Editor | null;&#10;}&#10;&#10;const TableOfContents: React.FC&lt;TableOfContentsProps&gt; = ({ editor }) =&gt; {&#10;  const [tocItems, setTocItems] = useState&lt;TocItem[]&gt;([]);&#10;&#10;  // 当编辑器内容变化时，更新目录&#10;  useEffect(() =&gt; {&#10;    if (!editor) return;&#10;&#10;    const updateToc = () =&gt; {&#10;      const items: TocItem[] = [];&#10;      const headings = document.querySelectorAll('.ProseMirror h1, .ProseMirror h2, .ProseMirror h3, .ProseMirror h4, .ProseMirror h5, .ProseMirror h6');&#10;&#10;      headings.forEach((heading, index) =&gt; {&#10;        const level = parseInt(heading.tagName[1]);&#10;        const text = heading.textContent || '';&#10;        const id = `heading-${index}`;&#10;&#10;        // 为每个标题添加 ID，以便点击目录可以跳转&#10;        heading.id = id;&#10;&#10;        items.push({ id, level, text });&#10;      });&#10;&#10;      setTocItems(items);&#10;    };&#10;&#10;    // 初始更新&#10;    setTimeout(updateToc, 100);&#10;&#10;    // 监听编辑器内容变化&#10;    editor.on('update', updateToc);&#10;&#10;    return () =&gt; {&#10;      editor.off('update', updateToc);&#10;    };&#10;  }, [editor]);&#10;&#10;  const scrollToHeading = (id: string) =&gt; {&#10;    const element = document.getElementById(id);&#10;    if (element) {&#10;      element.scrollIntoView({ behavior: 'smooth' });&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;table-of-contents p-4 border-l border-slate-200 dark:border-slate-700 h-full&quot;&gt;&#10;      &lt;h3 className=&quot;text-lg font-medium mb-4 text-slate-700 dark:text-slate-300&quot;&gt;目录&lt;/h3&gt;&#10;      &lt;ul className=&quot;space-y-2&quot;&gt;&#10;        {tocItems.length &gt; 0 ? (&#10;          tocItems.map((item) =&gt; (&#10;            &lt;li&#10;              key={item.id}&#10;              className=&quot;cursor-pointer hover:text-blue-500 transition-colors text-slate-600 dark:text-slate-400&quot;&#10;              style={{&#10;                paddingLeft: `${(item.level - 1) * 12}px`,&#10;                fontSize: `${16 - (item.level - 1) * 0.5}px`&#10;              }}&#10;              onClick={() =&gt; scrollToHeading(item.id)}&#10;            &gt;&#10;              {item.text}&#10;            &lt;/li&gt;&#10;          ))&#10;        ) : (&#10;          &lt;li className=&quot;text-sm text-slate-500 dark:text-slate-400&quot;&gt;没有找到标题&lt;/li&gt;&#10;        )}&#10;      &lt;/ul&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default TableOfContents;&#10;&#10;" />
              <option name="updatedContent" value="import React, { useEffect, useState } from 'react';&#10;import { Editor } from '@tiptap/react';&#10;import { Typography } from 'antd';&#10;&#10;const { Title } = Typography;&#10;&#10;interface TocItem {&#10;  id: string;&#10;  level: number;&#10;  text: string;&#10;}&#10;&#10;interface TableOfContentsProps {&#10;  editor: Editor | null;&#10;}&#10;&#10;const TableOfContents: React.FC&lt;TableOfContentsProps&gt; = ({ editor }) =&gt; {&#10;  const [tocItems, setTocItems] = useState&lt;TocItem[]&gt;([]);&#10;  const [activeId, setActiveId] = useState&lt;string&gt;('');&#10;&#10;  // 当编辑器内容变化时，更新目录&#10;  useEffect(() =&gt; {&#10;    if (!editor) return;&#10;&#10;    const updateToc = () =&gt; {&#10;      const items: TocItem[] = [];&#10;      const headings = document.querySelectorAll('.ProseMirror h1, .ProseMirror h2, .ProseMirror h3, .ProseMirror h4, .ProseMirror h5, .ProseMirror h6');&#10;&#10;      headings.forEach((heading, index) =&gt; {&#10;        const level = parseInt(heading.tagName[1]);&#10;        const text = heading.textContent || '';&#10;        const id = `heading-${index}`;&#10;&#10;        // 为每个标题添加 ID，以便点击目录可以跳转&#10;        heading.id = id;&#10;&#10;        items.push({ id, level, text });&#10;      });&#10;&#10;      setTocItems(items);&#10;    };&#10;&#10;    // 初始更新&#10;    setTimeout(updateToc, 100);&#10;&#10;    // 监听编辑器内容变化&#10;    editor.on('update', updateToc);&#10;&#10;    // 监听滚动，高亮当前位置的目录项&#10;    const handleScroll = () =&gt; {&#10;      const headings = document.querySelectorAll('.ProseMirror h1, .ProseMirror h2, .ProseMirror h3, .ProseMirror h4, .ProseMirror h5, .ProseMirror h6');&#10;      &#10;      // 查找当前视窗中最靠上的标题&#10;      for (const heading of headings) {&#10;        const rect = heading.getBoundingClientRect();&#10;        if (rect.top &gt;= 0 &amp;&amp; rect.top &lt;= window.innerHeight / 2) {&#10;          setActiveId(heading.id);&#10;          break;&#10;        }&#10;      }&#10;    };&#10;&#10;    document.addEventListener('scroll', handleScroll);&#10;&#10;    return () =&gt; {&#10;      editor.off('update', updateToc);&#10;      document.removeEventListener('scroll', handleScroll);&#10;    };&#10;  }, [editor]);&#10;&#10;  const scrollToHeading = (id: string) =&gt; {&#10;    const element = document.getElementById(id);&#10;    if (element) {&#10;      element.scrollIntoView({ behavior: 'smooth' });&#10;      setActiveId(id);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;table-of-contents p-4 h-full&quot;&gt;&#10;      &lt;Title level={4} className=&quot;mb-4 text-slate-700 dark:text-slate-300&quot;&gt;&#10;        文档目录&#10;      &lt;/Title&gt;&#10;      &lt;ul className=&quot;space-y-2 toc-list&quot;&gt;&#10;        {tocItems.length &gt; 0 ? (&#10;          tocItems.map((item) =&gt; (&#10;            &lt;li&#10;              key={item.id}&#10;              className={`cursor-pointer transition-colors text-slate-600 dark:text-slate-400 toc-item ${&#10;                activeId === item.id ? 'active-toc-item' : ''&#10;              }`}&#10;              style={{&#10;                paddingLeft: `${(item.level - 1) * 12}px`,&#10;                fontSize: `${16 - (item.level - 1) * 0.5}px`,&#10;                borderLeft: activeId === item.id ? '2px solid #1890ff' : '2px solid transparent',&#10;                paddingTop: '4px',&#10;                paddingBottom: '4px',&#10;              }}&#10;              onClick={() =&gt; scrollToHeading(item.id)}&#10;            &gt;&#10;              {item.text}&#10;            &lt;/li&gt;&#10;          ))&#10;        ) : (&#10;          &lt;li className=&quot;text-sm text-slate-500 dark:text-slate-400&quot;&gt;没有找到标题&lt;/li&gt;&#10;        )}&#10;      &lt;/ul&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default TableOfContents;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/colab-docs/src/components/tiptap-templates/simple/simple-editor.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/colab-docs/src/components/tiptap-templates/simple/simple-editor.tsx" />
              <option name="originalContent" value="import * as React from 'react'&#10;import { Editor, EditorContent, EditorContext, useEditor } from '@tiptap/react'&#10;&#10;// --- Tiptap Core Extensions ---&#10;import { StarterKit } from '@tiptap/starter-kit'&#10;import { Image } from '@tiptap/extension-image'&#10;import { TaskItem, TaskList } from '@tiptap/extension-list'&#10;import { TextAlign } from '@tiptap/extension-text-align'&#10;import { Typography } from '@tiptap/extension-typography'&#10;import { Highlight } from '@tiptap/extension-highlight'&#10;import { Subscript } from '@tiptap/extension-subscript'&#10;import { Superscript } from '@tiptap/extension-superscript'&#10;import { Selection } from '@tiptap/extensions'&#10;&#10;// --- UI Primitives ---&#10;import { Button } from '@/components/tiptap-ui-primitive/button'&#10;import { Spacer } from '@/components/tiptap-ui-primitive/spacer'&#10;import {&#10;  Toolbar,&#10;  ToolbarGroup,&#10;  ToolbarSeparator,&#10;} from '@/components/tiptap-ui-primitive/toolbar'&#10;&#10;// --- Tiptap Node ---&#10;import {&#10;  ImageUploadNode,&#10;} from '@/components/tiptap-node/image-upload-node/image-upload-node-extension'&#10;import {&#10;  HorizontalRule,&#10;} from '@/components/tiptap-node/horizontal-rule-node/horizontal-rule-node-extension'&#10;import '@/components/tiptap-node/blockquote-node/blockquote-node.scss'&#10;import '@/components/tiptap-node/code-block-node/code-block-node.scss'&#10;import '@/components/tiptap-node/horizontal-rule-node/horizontal-rule-node.scss'&#10;import '@/components/tiptap-node/list-node/list-node.scss'&#10;import '@/components/tiptap-node/image-node/image-node.scss'&#10;import '@/components/tiptap-node/heading-node/heading-node.scss'&#10;import '@/components/tiptap-node/paragraph-node/paragraph-node.scss'&#10;&#10;// --- Tiptap UI ---&#10;import {&#10;  HeadingDropdownMenu,&#10;} from '@/components/tiptap-ui/heading-dropdown-menu'&#10;import { ImageUploadButton } from '@/components/tiptap-ui/image-upload-button'&#10;import { ListDropdownMenu } from '@/components/tiptap-ui/list-dropdown-menu'&#10;import { BlockquoteButton } from '@/components/tiptap-ui/blockquote-button'&#10;import { CodeBlockButton } from '@/components/tiptap-ui/code-block-button'&#10;import {&#10;  ColorHighlightPopover,&#10;  ColorHighlightPopoverButton,&#10;  ColorHighlightPopoverContent,&#10;} from '@/components/tiptap-ui/color-highlight-popover'&#10;import {&#10;  LinkButton,&#10;  LinkContent,&#10;  LinkPopover,&#10;} from '@/components/tiptap-ui/link-popover'&#10;import { MarkButton } from '@/components/tiptap-ui/mark-button'&#10;import { TextAlignButton } from '@/components/tiptap-ui/text-align-button'&#10;import { UndoRedoButton } from '@/components/tiptap-ui/undo-redo-button'&#10;&#10;// --- Icons ---&#10;import { ArrowLeftIcon } from '@/components/tiptap-icons/arrow-left-icon'&#10;import { HighlighterIcon } from '@/components/tiptap-icons/highlighter-icon'&#10;import { LinkIcon } from '@/components/tiptap-icons/link-icon'&#10;&#10;// --- Hooks ---&#10;import { useIsMobile } from '@/hooks/use-mobile'&#10;import { useWindowSize } from '@/hooks/use-window-size'&#10;import { useCursorVisibility } from '@/hooks/use-cursor-visibility'&#10;&#10;// --- Components ---&#10;// --- Lib ---&#10;import { handleImageUpload, MAX_FILE_SIZE } from '@/lib/tiptap-utils'&#10;&#10;// --- Styles ---&#10;import '@/components/tiptap-templates/simple/simple-editor.scss'&#10;&#10;import content from '@/components/tiptap-templates/simple/data/content.json'&#10;&#10;// 协同编辑相关&#10;import { HocuspocusProvider } from '@hocuspocus/provider'&#10;import Collaboration from '@tiptap/extension-collaboration'&#10;import CollaborationCaret from '@tiptap/extension-collaboration-caret'&#10;&#10;const MainToolbarContent = ({&#10;                              onHighlighterClick,&#10;                              onLinkClick,&#10;                              isMobile,&#10;                            }: {&#10;  onHighlighterClick: () =&gt; void&#10;  onLinkClick: () =&gt; void&#10;  isMobile: boolean&#10;}) =&gt; {&#10;  return (&#10;    &lt;&gt;&#10;      &lt;Spacer/&gt;&#10;&#10;      &lt;ToolbarGroup&gt;&#10;        &lt;UndoRedoButton action=&quot;undo&quot;/&gt;&#10;        &lt;UndoRedoButton action=&quot;redo&quot;/&gt;&#10;      &lt;/ToolbarGroup&gt;&#10;&#10;      &lt;ToolbarSeparator/&gt;&#10;&#10;      &lt;ToolbarGroup&gt;&#10;        &lt;HeadingDropdownMenu levels={[1, 2, 3, 4]} portal={isMobile}/&gt;&#10;        &lt;ListDropdownMenu&#10;          types={['bulletList', 'orderedList', 'taskList']}&#10;          portal={isMobile}&#10;        /&gt;&#10;        &lt;BlockquoteButton/&gt;&#10;        &lt;CodeBlockButton/&gt;&#10;      &lt;/ToolbarGroup&gt;&#10;&#10;      &lt;ToolbarSeparator/&gt;&#10;&#10;      &lt;ToolbarGroup&gt;&#10;        &lt;MarkButton type=&quot;bold&quot;/&gt;&#10;        &lt;MarkButton type=&quot;italic&quot;/&gt;&#10;        &lt;MarkButton type=&quot;strike&quot;/&gt;&#10;        &lt;MarkButton type=&quot;code&quot;/&gt;&#10;        &lt;MarkButton type=&quot;underline&quot;/&gt;&#10;        {!isMobile ? (&#10;          &lt;ColorHighlightPopover/&gt;&#10;        ) : (&#10;          &lt;ColorHighlightPopoverButton onClick={onHighlighterClick}/&gt;&#10;        )}&#10;        {!isMobile ? &lt;LinkPopover/&gt; : &lt;LinkButton onClick={onLinkClick}/&gt;}&#10;      &lt;/ToolbarGroup&gt;&#10;&#10;      &lt;ToolbarSeparator/&gt;&#10;&#10;      &lt;ToolbarGroup&gt;&#10;        &lt;MarkButton type=&quot;superscript&quot;/&gt;&#10;        &lt;MarkButton type=&quot;subscript&quot;/&gt;&#10;      &lt;/ToolbarGroup&gt;&#10;&#10;      &lt;ToolbarSeparator/&gt;&#10;&#10;      &lt;ToolbarGroup&gt;&#10;        &lt;TextAlignButton align=&quot;left&quot;/&gt;&#10;        &lt;TextAlignButton align=&quot;center&quot;/&gt;&#10;        &lt;TextAlignButton align=&quot;right&quot;/&gt;&#10;        &lt;TextAlignButton align=&quot;justify&quot;/&gt;&#10;      &lt;/ToolbarGroup&gt;&#10;&#10;      &lt;ToolbarSeparator/&gt;&#10;&#10;      &lt;ToolbarGroup&gt;&#10;        &lt;ImageUploadButton text=&quot;Add&quot;/&gt;&#10;      &lt;/ToolbarGroup&gt;&#10;&#10;      &lt;Spacer/&gt;&#10;&#10;      {isMobile &amp;&amp; &lt;ToolbarSeparator/&gt;}&#10;&#10;    &lt;/&gt;&#10;  )&#10;}&#10;&#10;const MobileToolbarContent = ({&#10;                                type,&#10;                                onBack,&#10;                              }: {&#10;  type: 'highlighter' | 'link'&#10;  onBack: () =&gt; void&#10;}) =&gt; (&#10;  &lt;&gt;&#10;    &lt;ToolbarGroup&gt;&#10;      &lt;Button data-style=&quot;ghost&quot; onClick={onBack}&gt;&#10;        &lt;ArrowLeftIcon className=&quot;tiptap-button-icon&quot;/&gt;&#10;        {type === 'highlighter' ? (&#10;          &lt;HighlighterIcon className=&quot;tiptap-button-icon&quot;/&gt;&#10;        ) : (&#10;          &lt;LinkIcon className=&quot;tiptap-button-icon&quot;/&gt;&#10;        )}&#10;      &lt;/Button&gt;&#10;    &lt;/ToolbarGroup&gt;&#10;&#10;    &lt;ToolbarSeparator/&gt;&#10;&#10;    {type === 'highlighter' ? (&#10;      &lt;ColorHighlightPopoverContent/&gt;&#10;    ) : (&#10;      &lt;LinkContent/&gt;&#10;    )}&#10;  &lt;/&gt;&#10;)&#10;&#10;// 修改接口定义，添加 documentId 属性&#10;interface SimpleEditorProps {&#10;  onEditorReady?: (editor: Editor) =&gt; void;&#10;  showToolbar?: boolean;&#10;  documentId?: string; // 新增：协作文档ID&#10;}&#10;&#10;export function SimpleEditor ({&#10;  onEditorReady,&#10;  showToolbar = true,&#10;  documentId = 'default-doc', // 新增：默认文档ID&#10;}: SimpleEditorProps) {&#10;  const isMobile = useIsMobile()&#10;  const { height } = useWindowSize()&#10;  const [mobileView, setMobileView] = React.useState&lt;&#10;    'main' | 'highlighter' | 'link'&#10;  &gt;('main')&#10;  const toolbarRef = React.useRef&lt;HTMLDivElement&gt;(null)&#10;&#10;  // Hocuspocus Provider&#10;  const [provider, setProvider] = React.useState&lt;HocuspocusProvider | null&gt;(null)&#10;  React.useEffect(() =&gt; {&#10;    const p = new HocuspocusProvider({&#10;      url: 'ws://localhost:9999', // TODO: 与后端 ws_port 保持一致&#10;      name: documentId,&#10;      onOpen: () =&gt; console.log('[Hocuspocus] connected'),&#10;      onClose: () =&gt; console.log('[Hocuspocus] disconnected'),&#10;      onError: (e) =&gt; console.error('[Hocuspocus] error', e),&#10;    })&#10;    setProvider(p)&#10;    return () =&gt; p.destroy()&#10;  }, [documentId])&#10;&#10;  const editor = useEditor({&#10;    immediatelyRender: false,&#10;    shouldRerenderOnTransaction: false,&#10;    editorProps: {&#10;      attributes: {&#10;        autocomplete: 'off',&#10;        autocorrect: 'off',&#10;        autocapitalize: 'off',&#10;        'aria-label': 'Main content area, start typing to enter text.',&#10;        class: 'simple-editor',&#10;      },&#10;    },&#10;    extensions: [&#10;      StarterKit.configure({&#10;        horizontalRule: false,&#10;        link: { openOnClick: false, enableClickSelection: true },&#10;      }),&#10;      HorizontalRule,&#10;      TextAlign.configure({ types: ['heading', 'paragraph'] }),&#10;      TaskList,&#10;      TaskItem.configure({ nested: true }),&#10;      Highlight.configure({ multicolor: true }),&#10;      Image,&#10;      Typography,&#10;      Superscript,&#10;      Subscript,&#10;      Selection,&#10;      ImageUploadNode.configure({&#10;        accept: 'image/*',&#10;        maxSize: MAX_FILE_SIZE,&#10;        limit: 3,&#10;        upload: handleImageUpload,&#10;        onError: (error) =&gt; console.error('Upload failed:', error),&#10;      }),&#10;      // 新增：协同编辑扩展（在 provider 就绪时启用）&#10;      ...(provider ? [&#10;        Collaboration.configure({&#10;          document: provider.document,&#10;        }),&#10;        CollaborationCaret.configure({&#10;          provider,&#10;          user: {&#10;            name: localStorage.getItem('username') || '用户',&#10;            color: getRandomColor(),&#10;          },&#10;        }),&#10;      ] : []),&#10;    ],&#10;    // 协作模式下，初始内容由服务端同步，不再使用本地 content&#10;    content: provider ? undefined : content,&#10;  }, [provider]) // 新增依赖：provider&#10;&#10;  // 当编辑器实例创建后，通过回调函数传递进去&#10;  React.useEffect(() =&gt; {&#10;    if (editor &amp;&amp; onEditorReady) {&#10;      onEditorReady(editor)&#10;    }&#10;  }, [editor, onEditorReady])&#10;&#10;  const rect = useCursorVisibility({&#10;    editor,&#10;    overlayHeight: toolbarRef.current?.getBoundingClientRect().height ?? 0,&#10;  })&#10;&#10;  return (&#10;    &lt;div className=&quot;simple-editor-wrapper&quot;&gt;&#10;      &lt;EditorContext.Provider value={{ editor }}&gt;&#10;        {showToolbar &amp;&amp; (  // 根据showToolbar属性决定是否显示工具栏&#10;          &lt;Toolbar&#10;            ref={toolbarRef}&#10;            className=&quot;tiptap-toolbar&quot;&#10;            style={{&#10;              ...(isMobile&#10;                ? {&#10;                  bottom: `calc(100% - ${height - rect.y}px)`,&#10;                }&#10;                : {}),&#10;              width: '100%',&#10;              overflowX: 'auto',&#10;            }}&#10;          &gt;&#10;            {mobileView === 'main' ? (&#10;              &lt;MainToolbarContent&#10;                onHighlighterClick={() =&gt; setMobileView('highlighter')}&#10;                onLinkClick={() =&gt; setMobileView('link')}&#10;                isMobile={isMobile}&#10;              /&gt;&#10;            ) : (&#10;              &lt;MobileToolbarContent&#10;                type={mobileView === 'highlighter' ? 'highlighter' : 'link'}&#10;                onBack={() =&gt; setMobileView('main')}&#10;              /&gt;&#10;            )}&#10;          &lt;/Toolbar&gt;&#10;        )}&#10;&#10;        &lt;EditorContent&#10;          editor={editor}&#10;          role=&quot;presentation&quot;&#10;          className=&quot;simple-editor-content&quot;&#10;        /&gt;&#10;      &lt;/EditorContext.Provider&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;&#10;// 新增：为协同光标提供随机颜色&#10;function getRandomColor () {&#10;  const colors = ['#958DF1','#F98181','#FBBC88','#FAF594','#70CFF8','#94FADB','#B9F18D']&#10;  return colors[Math.floor(Math.random() * colors.length)]&#10;}&#10;" />
              <option name="updatedContent" value="import * as React from 'react'&#10;import { Editor, EditorContent, EditorContext, useEditor } from '@tiptap/react'&#10;&#10;// --- Tiptap Core Extensions ---&#10;import { StarterKit } from '@tiptap/starter-kit'&#10;import { Image } from '@tiptap/extension-image'&#10;import { TaskItem, TaskList } from '@tiptap/extension-list'&#10;import { TextAlign } from '@tiptap/extension-text-align'&#10;import { Typography } from '@tiptap/extension-typography'&#10;import { Highlight } from '@tiptap/extension-highlight'&#10;import { Subscript } from '@tiptap/extension-subscript'&#10;import { Superscript } from '@tiptap/extension-superscript'&#10;import { Selection } from '@tiptap/extensions'&#10;&#10;// --- UI Primitives ---&#10;import { Button } from '@/components/tiptap-ui-primitive/button'&#10;import { Spacer } from '@/components/tiptap-ui-primitive/spacer'&#10;import {&#10;  Toolbar,&#10;  ToolbarGroup,&#10;  ToolbarSeparator,&#10;} from '@/components/tiptap-ui-primitive/toolbar'&#10;&#10;// --- Tiptap Node ---&#10;import {&#10;  ImageUploadNode,&#10;} from '@/components/tiptap-node/image-upload-node/image-upload-node-extension'&#10;import {&#10;  HorizontalRule,&#10;} from '@/components/tiptap-node/horizontal-rule-node/horizontal-rule-node-extension'&#10;import '@/components/tiptap-node/blockquote-node/blockquote-node.scss'&#10;import '@/components/tiptap-node/code-block-node/code-block-node.scss'&#10;import '@/components/tiptap-node/horizontal-rule-node/horizontal-rule-node.scss'&#10;import '@/components/tiptap-node/list-node/list-node.scss'&#10;import '@/components/tiptap-node/image-node/image-node.scss'&#10;import '@/components/tiptap-node/heading-node/heading-node.scss'&#10;import '@/components/tiptap-node/paragraph-node/paragraph-node.scss'&#10;&#10;// --- Tiptap UI ---&#10;import {&#10;  HeadingDropdownMenu,&#10;} from '@/components/tiptap-ui/heading-dropdown-menu'&#10;import { ImageUploadButton } from '@/components/tiptap-ui/image-upload-button'&#10;import { ListDropdownMenu } from '@/components/tiptap-ui/list-dropdown-menu'&#10;import { BlockquoteButton } from '@/components/tiptap-ui/blockquote-button'&#10;import { CodeBlockButton } from '@/components/tiptap-ui/code-block-button'&#10;import {&#10;  ColorHighlightPopover,&#10;  ColorHighlightPopoverButton,&#10;  ColorHighlightPopoverContent,&#10;} from '@/components/tiptap-ui/color-highlight-popover'&#10;import {&#10;  LinkButton,&#10;  LinkContent,&#10;  LinkPopover,&#10;} from '@/components/tiptap-ui/link-popover'&#10;import { MarkButton } from '@/components/tiptap-ui/mark-button'&#10;import { TextAlignButton } from '@/components/tiptap-ui/text-align-button'&#10;import { UndoRedoButton } from '@/components/tiptap-ui/undo-redo-button'&#10;&#10;// --- Icons ---&#10;import { ArrowLeftIcon } from '@/components/tiptap-icons/arrow-left-icon'&#10;import { HighlighterIcon } from '@/components/tiptap-icons/highlighter-icon'&#10;import { LinkIcon } from '@/components/tiptap-icons/link-icon'&#10;&#10;// --- Hooks ---&#10;import { useIsMobile } from '@/hooks/use-mobile'&#10;import { useWindowSize } from '@/hooks/use-window-size'&#10;import { useCursorVisibility } from '@/hooks/use-cursor-visibility'&#10;&#10;// --- Components ---&#10;// --- Lib ---&#10;import { handleImageUpload, MAX_FILE_SIZE } from '@/lib/tiptap-utils'&#10;&#10;// --- Styles ---&#10;import '@/components/tiptap-templates/simple/simple-editor.scss'&#10;&#10;import content from '@/components/tiptap-templates/simple/data/content.json'&#10;&#10;// 协同编辑相关&#10;import { HocuspocusProvider } from '@hocuspocus/provider'&#10;import Collaboration from '@tiptap/extension-collaboration'&#10;import CollaborationCaret from '@tiptap/extension-collaboration-caret'&#10;&#10;const MainToolbarContent = ({&#10;                              onHighlighterClick,&#10;                              onLinkClick,&#10;                              isMobile,&#10;                            }: {&#10;  onHighlighterClick: () =&gt; void&#10;  onLinkClick: () =&gt; void&#10;  isMobile: boolean&#10;}) =&gt; {&#10;  return (&#10;    &lt;&gt;&#10;      &lt;Spacer/&gt;&#10;&#10;      &lt;ToolbarGroup&gt;&#10;        &lt;UndoRedoButton action=&quot;undo&quot;/&gt;&#10;        &lt;UndoRedoButton action=&quot;redo&quot;/&gt;&#10;      &lt;/ToolbarGroup&gt;&#10;&#10;      &lt;ToolbarSeparator/&gt;&#10;&#10;      &lt;ToolbarGroup&gt;&#10;        &lt;HeadingDropdownMenu levels={[1, 2, 3, 4]} portal={isMobile}/&gt;&#10;        &lt;ListDropdownMenu&#10;          types={['bulletList', 'orderedList', 'taskList']}&#10;          portal={isMobile}&#10;        /&gt;&#10;        &lt;BlockquoteButton/&gt;&#10;        &lt;CodeBlockButton/&gt;&#10;      &lt;/ToolbarGroup&gt;&#10;&#10;      &lt;ToolbarSeparator/&gt;&#10;&#10;      &lt;ToolbarGroup&gt;&#10;        &lt;MarkButton type=&quot;bold&quot;/&gt;&#10;        &lt;MarkButton type=&quot;italic&quot;/&gt;&#10;        &lt;MarkButton type=&quot;strike&quot;/&gt;&#10;        &lt;MarkButton type=&quot;code&quot;/&gt;&#10;        &lt;MarkButton type=&quot;underline&quot;/&gt;&#10;        {!isMobile ? (&#10;          &lt;ColorHighlightPopover/&gt;&#10;        ) : (&#10;          &lt;ColorHighlightPopoverButton onClick={onHighlighterClick}/&gt;&#10;        )}&#10;        {!isMobile ? &lt;LinkPopover/&gt; : &lt;LinkButton onClick={onLinkClick}/&gt;}&#10;      &lt;/ToolbarGroup&gt;&#10;&#10;      &lt;ToolbarSeparator/&gt;&#10;&#10;      &lt;ToolbarGroup&gt;&#10;        &lt;MarkButton type=&quot;superscript&quot;/&gt;&#10;        &lt;MarkButton type=&quot;subscript&quot;/&gt;&#10;      &lt;/ToolbarGroup&gt;&#10;&#10;      &lt;ToolbarSeparator/&gt;&#10;&#10;      &lt;ToolbarGroup&gt;&#10;        &lt;TextAlignButton align=&quot;left&quot;/&gt;&#10;        &lt;TextAlignButton align=&quot;center&quot;/&gt;&#10;        &lt;TextAlignButton align=&quot;right&quot;/&gt;&#10;        &lt;TextAlignButton align=&quot;justify&quot;/&gt;&#10;      &lt;/ToolbarGroup&gt;&#10;&#10;      &lt;ToolbarSeparator/&gt;&#10;&#10;      &lt;ToolbarGroup&gt;&#10;        &lt;ImageUploadButton text=&quot;Add&quot;/&gt;&#10;      &lt;/ToolbarGroup&gt;&#10;&#10;      &lt;Spacer/&gt;&#10;&#10;      {isMobile &amp;&amp; &lt;ToolbarSeparator/&gt;}&#10;&#10;    &lt;/&gt;&#10;  )&#10;}&#10;&#10;const MobileToolbarContent = ({&#10;                                type,&#10;                                onBack,&#10;                              }: {&#10;  type: 'highlighter' | 'link'&#10;  onBack: () =&gt; void&#10;}) =&gt; (&#10;  &lt;&gt;&#10;    &lt;ToolbarGroup&gt;&#10;      &lt;Button data-style=&quot;ghost&quot; onClick={onBack}&gt;&#10;        &lt;ArrowLeftIcon className=&quot;tiptap-button-icon&quot;/&gt;&#10;        {type === 'highlighter' ? (&#10;          &lt;HighlighterIcon className=&quot;tiptap-button-icon&quot;/&gt;&#10;        ) : (&#10;          &lt;LinkIcon className=&quot;tiptap-button-icon&quot;/&gt;&#10;        )}&#10;      &lt;/Button&gt;&#10;    &lt;/ToolbarGroup&gt;&#10;&#10;    &lt;ToolbarSeparator/&gt;&#10;&#10;    {type === 'highlighter' ? (&#10;      &lt;ColorHighlightPopoverContent/&gt;&#10;    ) : (&#10;      &lt;LinkContent/&gt;&#10;    )}&#10;  &lt;/&gt;&#10;)&#10;&#10;// 修改接口定义，添加 documentId 属性&#10;interface SimpleEditorProps {&#10;  onEditorReady?: (editor: Editor) =&gt; void;&#10;  showToolbar?: boolean;&#10;  documentId?: string; // 新增：协作文档ID&#10;}&#10;&#10;export function SimpleEditor ({&#10;  onEditorReady,&#10;  showToolbar = true,&#10;  documentId = 'default-doc', // 新增：默认文档ID&#10;}: SimpleEditorProps) {&#10;  const isMobile = useIsMobile()&#10;  const { height } = useWindowSize()&#10;  const [mobileView, setMobileView] = React.useState&lt;&#10;    'main' | 'highlighter' | 'link'&#10;  &gt;('main')&#10;  const toolbarRef = React.useRef&lt;HTMLDivElement&gt;(null)&#10;&#10;  // Hocuspocus Provider&#10;  const [provider, setProvider] = React.useState&lt;HocuspocusProvider | null&gt;(null)&#10;  React.useEffect(() =&gt; {&#10;    const p = new HocuspocusProvider({&#10;      url: 'ws://localhost:9999', // TODO: 与后端 ws_port 保持一致&#10;      name: documentId,&#10;      onOpen: () =&gt; console.log('[Hocuspocus] connected'),&#10;      onClose: () =&gt; console.log('[Hocuspocus] disconnected'),&#10;      onError: (e) =&gt; console.error('[Hocuspocus] error', e),&#10;    })&#10;    setProvider(p)&#10;    return () =&gt; p.destroy()&#10;  }, [documentId])&#10;&#10;  const editor = useEditor({&#10;    immediatelyRender: false,&#10;    shouldRerenderOnTransaction: false,&#10;    editorProps: {&#10;      attributes: {&#10;        autocomplete: 'off',&#10;        autocorrect: 'off',&#10;        autocapitalize: 'off',&#10;        'aria-label': 'Main content area, start typing to enter text.',&#10;        class: 'simple-editor',&#10;      },&#10;    },&#10;    extensions: [&#10;      StarterKit.configure({&#10;        horizontalRule: false,&#10;        link: { openOnClick: false, enableClickSelection: true },&#10;      }),&#10;      HorizontalRule,&#10;      TextAlign.configure({ types: ['heading', 'paragraph'] }),&#10;      TaskList,&#10;      TaskItem.configure({ nested: true }),&#10;      Highlight.configure({ multicolor: true }),&#10;      Image,&#10;      Typography,&#10;      Superscript,&#10;      Subscript,&#10;      Selection,&#10;      ImageUploadNode.configure({&#10;        accept: 'image/*',&#10;        maxSize: MAX_FILE_SIZE,&#10;        limit: 3,&#10;        upload: handleImageUpload,&#10;        onError: (error) =&gt; console.error('Upload failed:', error),&#10;      }),&#10;      // 新增：协同编辑扩展（在 provider 就绪时启用）&#10;      ...(provider ? [&#10;        Collaboration.configure({&#10;          document: provider.document,&#10;        }),&#10;        CollaborationCaret.configure({&#10;          provider,&#10;          user: {&#10;            name: localStorage.getItem('username') || '用户',&#10;            color: getRandomColor(),&#10;          },&#10;        }),&#10;      ] : []),&#10;    ],&#10;    // 协作模式下，初始内容由服务端同步，不再使用本地 content&#10;    content: provider ? undefined : content,&#10;  }, [provider]) // 新增依赖：provider&#10;&#10;  // 当编辑器实例创建后，通过回调函数传递进去&#10;  React.useEffect(() =&gt; {&#10;    if (editor &amp;&amp; onEditorReady) {&#10;      onEditorReady(editor)&#10;    }&#10;  }, [editor, onEditorReady])&#10;&#10;  const rect = useCursorVisibility({&#10;    editor,&#10;    overlayHeight: toolbarRef.current?.getBoundingClientRect().height ?? 0,&#10;  })&#10;&#10;  return (&#10;    &lt;div className=&quot;simple-editor-wrapper&quot;&gt;&#10;      &lt;EditorContext.Provider value={{ editor }}&gt;&#10;        {showToolbar &amp;&amp; (  // 根据showToolbar属性决定是否显示工具栏&#10;          &lt;Toolbar&#10;            ref={toolbarRef}&#10;            className=&quot;tiptap-toolbar&quot;&#10;            style={{&#10;              ...(isMobile&#10;                ? {&#10;                  bottom: `calc(100% - ${height - rect.y}px)`,&#10;                }&#10;                : {}),&#10;              width: '100%',&#10;              overflowX: 'auto',&#10;            }}&#10;          &gt;&#10;            {mobileView === 'main' ? (&#10;              &lt;MainToolbarContent&#10;                onHighlighterClick={() =&gt; setMobileView('highlighter')}&#10;                onLinkClick={() =&gt; setMobileView('link')}&#10;                isMobile={isMobile}&#10;              /&gt;&#10;            ) : (&#10;              &lt;MobileToolbarContent&#10;                type={mobileView === 'highlighter' ? 'highlighter' : 'link'}&#10;                onBack={() =&gt; setMobileView('main')}&#10;              /&gt;&#10;            )}&#10;          &lt;/Toolbar&gt;&#10;        )}&#10;&#10;        &lt;EditorContent&#10;          editor={editor}&#10;          role=&quot;presentation&quot;&#10;          className=&quot;simple-editor-content&quot;&#10;        /&gt;&#10;      &lt;/EditorContext.Provider&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;&#10;// 新增：为协同光标提供随机颜色&#10;function getRandomColor () {&#10;  const colors = ['#958DF1','#F98181','#FBBC88','#FAF594','#70CFF8','#94FADB','#B9F18D']&#10;  return colors[Math.floor(Math.random() * colors.length)]&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/colab-docs/src/components/tiptap-templates/simple/toolbar-content.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/colab-docs/src/components/tiptap-templates/simple/toolbar-content.tsx" />
              <option name="originalContent" value="import { Editor } from &quot;@tiptap/react&quot;&#10;&#10;// --- UI Primitives ---&#10;import { Button } from &quot;@/components/tiptap-ui-primitive/button&quot;&#10;import { Spacer } from &quot;@/components/tiptap-ui-primitive/spacer&quot;&#10;import {&#10;  ToolbarGroup,&#10;  ToolbarSeparator,&#10;} from &quot;@/components/tiptap-ui-primitive/toolbar&quot;&#10;&#10;// --- Tiptap UI ---&#10;import { HeadingDropdownMenu } from &quot;@/components/tiptap-ui/heading-dropdown-menu&quot;&#10;import { ImageUploadButton } from &quot;@/components/tiptap-ui/image-upload-button&quot;&#10;import { ListDropdownMenu } from &quot;@/components/tiptap-ui/list-dropdown-menu&quot;&#10;import { BlockquoteButton } from &quot;@/components/tiptap-ui/blockquote-button&quot;&#10;import { CodeBlockButton } from &quot;@/components/tiptap-ui/code-block-button&quot;&#10;import {&#10;  ColorHighlightPopover,&#10;  ColorHighlightPopoverContent,&#10;  ColorHighlightPopoverButton,&#10;} from &quot;@/components/tiptap-ui/color-highlight-popover&quot;&#10;import {&#10;  LinkPopover,&#10;  LinkContent,&#10;  LinkButton,&#10;} from &quot;@/components/tiptap-ui/link-popover&quot;&#10;import { MarkButton } from &quot;@/components/tiptap-ui/mark-button&quot;&#10;import { TextAlignButton } from &quot;@/components/tiptap-ui/text-align-button&quot;&#10;import { UndoRedoButton } from &quot;@/components/tiptap-ui/undo-redo-button&quot;&#10;&#10;// --- Icons ---&#10;import { ArrowLeftIcon } from &quot;@/components/tiptap-icons/arrow-left-icon&quot;&#10;import { HighlighterIcon } from &quot;@/components/tiptap-icons/highlighter-icon&quot;&#10;import { LinkIcon } from &quot;@/components/tiptap-icons/link-icon&quot;&#10;&#10;interface ToolbarContentProps {&#10;  editor: Editor | null;&#10;  onHighlighterClick: () =&gt; void;&#10;  onLinkClick: () =&gt; void;&#10;  isMobile: boolean;&#10;}&#10;&#10;export const MainToolbarContent = ({&#10;  editor,&#10;  onHighlighterClick,&#10;  onLinkClick,&#10;  isMobile,&#10;}: ToolbarContentProps) =&gt; {&#10;  if (!editor) return null;&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;Spacer /&gt;&#10;&#10;      &lt;ToolbarGroup&gt;&#10;        &lt;UndoRedoButton action=&quot;undo&quot; /&gt;&#10;        &lt;UndoRedoButton action=&quot;redo&quot; /&gt;&#10;      &lt;/ToolbarGroup&gt;&#10;&#10;      &lt;ToolbarSeparator /&gt;&#10;&#10;      &lt;ToolbarGroup&gt;&#10;        &lt;HeadingDropdownMenu levels={[1, 2, 3, 4]} portal={isMobile} /&gt;&#10;        &lt;ListDropdownMenu&#10;          types={[&quot;bulletList&quot;, &quot;orderedList&quot;, &quot;taskList&quot;]}&#10;          portal={isMobile}&#10;        /&gt;&#10;        &lt;BlockquoteButton /&gt;&#10;        &lt;CodeBlockButton /&gt;&#10;      &lt;/ToolbarGroup&gt;&#10;&#10;      &lt;ToolbarSeparator /&gt;&#10;&#10;      &lt;ToolbarGroup&gt;&#10;        &lt;MarkButton type=&quot;bold&quot; /&gt;&#10;        &lt;MarkButton type=&quot;italic&quot; /&gt;&#10;        &lt;MarkButton type=&quot;strike&quot; /&gt;&#10;        &lt;MarkButton type=&quot;code&quot; /&gt;&#10;        &lt;MarkButton type=&quot;underline&quot; /&gt;&#10;        {!isMobile ? (&#10;          &lt;ColorHighlightPopover /&gt;&#10;        ) : (&#10;          &lt;ColorHighlightPopoverButton onClick={onHighlighterClick} /&gt;&#10;        )}&#10;        {!isMobile ? &lt;LinkPopover /&gt; : &lt;LinkButton onClick={onLinkClick} /&gt;}&#10;      &lt;/ToolbarGroup&gt;&#10;&#10;      &lt;ToolbarSeparator /&gt;&#10;&#10;      &lt;ToolbarGroup&gt;&#10;        &lt;MarkButton type=&quot;superscript&quot; /&gt;&#10;        &lt;MarkButton type=&quot;subscript&quot; /&gt;&#10;      &lt;/ToolbarGroup&gt;&#10;&#10;      &lt;ToolbarSeparator /&gt;&#10;&#10;      &lt;ToolbarGroup&gt;&#10;        &lt;TextAlignButton align=&quot;left&quot; /&gt;&#10;        &lt;TextAlignButton align=&quot;center&quot; /&gt;&#10;        &lt;TextAlignButton align=&quot;right&quot; /&gt;&#10;        &lt;TextAlignButton align=&quot;justify&quot; /&gt;&#10;      &lt;/ToolbarGroup&gt;&#10;&#10;      &lt;ToolbarSeparator /&gt;&#10;&#10;      &lt;ToolbarGroup&gt;&#10;        &lt;ImageUploadButton text=&quot;Add&quot; /&gt;&#10;      &lt;/ToolbarGroup&gt;&#10;&#10;      &lt;Spacer /&gt;&#10;&#10;      {isMobile &amp;&amp; &lt;ToolbarSeparator /&gt;}&#10;    &lt;/&gt;&#10;  );&#10;};&#10;&#10;export const MobileToolbarContent = ({&#10;  type,&#10;  onBack,&#10;}: {&#10;  type: &quot;highlighter&quot; | &quot;link&quot;;&#10;  onBack: () =&gt; void;&#10;}) =&gt; (&#10;  &lt;&gt;&#10;    &lt;ToolbarGroup&gt;&#10;      &lt;Button data-style=&quot;ghost&quot; onClick={onBack}&gt;&#10;        &lt;ArrowLeftIcon className=&quot;tiptap-button-icon&quot; /&gt;&#10;        {type === &quot;highlighter&quot; ? (&#10;          &lt;HighlighterIcon className=&quot;tiptap-button-icon&quot; /&gt;&#10;        ) : (&#10;          &lt;LinkIcon className=&quot;tiptap-button-icon&quot; /&gt;&#10;        )}&#10;      &lt;/Button&gt;&#10;    &lt;/ToolbarGroup&gt;&#10;&#10;    &lt;ToolbarSeparator /&gt;&#10;&#10;    {type === &quot;highlighter&quot; ? (&#10;      &lt;ColorHighlightPopoverContent /&gt;&#10;    ) : (&#10;      &lt;LinkContent /&gt;&#10;    )}&#10;  &lt;/&gt;&#10;);&#10;&#10;" />
              <option name="updatedContent" value="import { Editor } from &quot;@tiptap/react&quot;&#10;import { MenuUnfoldOutlined, MenuFoldOutlined } from '@ant-design/icons'&#10;&#10;// --- UI Primitives ---&#10;import { Button } from &quot;@/components/tiptap-ui-primitive/button&quot;&#10;import { Spacer } from &quot;@/components/tiptap-ui-primitive/spacer&quot;&#10;import {&#10;  ToolbarGroup,&#10;  ToolbarSeparator,&#10;} from &quot;@/components/tiptap-ui-primitive/toolbar&quot;&#10;&#10;// --- Tiptap UI ---&#10;import { HeadingDropdownMenu } from &quot;@/components/tiptap-ui/heading-dropdown-menu&quot;&#10;import { ImageUploadButton } from &quot;@/components/tiptap-ui/image-upload-button&quot;&#10;import { ListDropdownMenu } from &quot;@/components/tiptap-ui/list-dropdown-menu&quot;&#10;import { BlockquoteButton } from &quot;@/components/tiptap-ui/blockquote-button&quot;&#10;import { CodeBlockButton } from &quot;@/components/tiptap-ui/code-block-button&quot;&#10;import {&#10;  ColorHighlightPopover,&#10;  ColorHighlightPopoverContent,&#10;  ColorHighlightPopoverButton,&#10;} from &quot;@/components/tiptap-ui/color-highlight-popover&quot;&#10;import {&#10;  LinkPopover,&#10;  LinkContent,&#10;  LinkButton,&#10;} from &quot;@/components/tiptap-ui/link-popover&quot;&#10;import { MarkButton } from &quot;@/components/tiptap-ui/mark-button&quot;&#10;import { TextAlignButton } from &quot;@/components/tiptap-ui/text-align-button&quot;&#10;import { UndoRedoButton } from &quot;@/components/tiptap-ui/undo-redo-button&quot;&#10;&#10;// --- Icons ---&#10;import { ArrowLeftIcon } from &quot;@/components/tiptap-icons/arrow-left-icon&quot;&#10;import { HighlighterIcon } from &quot;@/components/tiptap-icons/highlighter-icon&quot;&#10;import { LinkIcon } from &quot;@/components/tiptap-icons/link-icon&quot;&#10;&#10;interface ToolbarContentProps {&#10;  editor: Editor | null;&#10;  onHighlighterClick: () =&gt; void;&#10;  onLinkClick: () =&gt; void;&#10;  isMobile: boolean;&#10;  isTocVisible?: boolean; // 添加目录可见性状态&#10;  onToggleToc?: () =&gt; void; // 添加切换目录的回调函数&#10;}&#10;&#10;export const MainToolbarContent = ({&#10;  editor,&#10;  onHighlighterClick,&#10;  onLinkClick,&#10;  isMobile,&#10;  isTocVisible = false, // 默认目录不可见&#10;  onToggleToc = () =&gt; {}, // 默认空函数&#10;}: ToolbarContentProps) =&gt; {&#10;  if (!editor) return null;&#10;&#10;  return (&#10;    &lt;&gt;&#10;      {/* 添加目录按钮 */}&#10;      &lt;ToolbarGroup className=&quot;mr-2&quot;&gt;&#10;        &lt;Button &#10;          data-active={isTocVisible}&#10;          onClick={onToggleToc}&#10;        &gt;&#10;          {isTocVisible ? &lt;MenuFoldOutlined /&gt; : &lt;MenuUnfoldOutlined /&gt;}&#10;        &lt;/Button&gt;&#10;      &lt;/ToolbarGroup&gt;&#10;      &#10;      &lt;ToolbarSeparator /&gt;&#10;&#10;      &lt;Spacer /&gt;&#10;&#10;      &lt;ToolbarGroup&gt;&#10;        &lt;UndoRedoButton action=&quot;undo&quot; /&gt;&#10;        &lt;UndoRedoButton action=&quot;redo&quot; /&gt;&#10;      &lt;/ToolbarGroup&gt;&#10;&#10;      &lt;ToolbarSeparator /&gt;&#10;&#10;      &lt;ToolbarGroup&gt;&#10;        &lt;HeadingDropdownMenu levels={[1, 2, 3, 4]} portal={isMobile} /&gt;&#10;        &lt;ListDropdownMenu&#10;          types={[&quot;bulletList&quot;, &quot;orderedList&quot;, &quot;taskList&quot;]}&#10;          portal={isMobile}&#10;        /&gt;&#10;        &lt;BlockquoteButton /&gt;&#10;        &lt;CodeBlockButton /&gt;&#10;      &lt;/ToolbarGroup&gt;&#10;&#10;      &lt;ToolbarSeparator /&gt;&#10;&#10;      &lt;ToolbarGroup&gt;&#10;        &lt;MarkButton type=&quot;bold&quot; /&gt;&#10;        &lt;MarkButton type=&quot;italic&quot; /&gt;&#10;        &lt;MarkButton type=&quot;strike&quot; /&gt;&#10;        &lt;MarkButton type=&quot;code&quot; /&gt;&#10;        &lt;MarkButton type=&quot;underline&quot; /&gt;&#10;        {!isMobile ? (&#10;          &lt;ColorHighlightPopover /&gt;&#10;        ) : (&#10;          &lt;ColorHighlightPopoverButton onClick={onHighlighterClick} /&gt;&#10;        )}&#10;        {!isMobile ? &lt;LinkPopover /&gt; : &lt;LinkButton onClick={onLinkClick} /&gt;}&#10;      &lt;/ToolbarGroup&gt;&#10;&#10;      &lt;ToolbarSeparator /&gt;&#10;&#10;      &lt;ToolbarGroup&gt;&#10;        &lt;MarkButton type=&quot;superscript&quot; /&gt;&#10;        &lt;MarkButton type=&quot;subscript&quot; /&gt;&#10;      &lt;/ToolbarGroup&gt;&#10;&#10;      &lt;ToolbarSeparator /&gt;&#10;&#10;      &lt;ToolbarGroup&gt;&#10;        &lt;TextAlignButton align=&quot;left&quot; /&gt;&#10;        &lt;TextAlignButton align=&quot;center&quot; /&gt;&#10;        &lt;TextAlignButton align=&quot;right&quot; /&gt;&#10;        &lt;TextAlignButton align=&quot;justify&quot; /&gt;&#10;      &lt;/ToolbarGroup&gt;&#10;&#10;      &lt;ToolbarSeparator /&gt;&#10;&#10;      &lt;ToolbarGroup&gt;&#10;        &lt;ImageUploadButton text=&quot;Add&quot; /&gt;&#10;      &lt;/ToolbarGroup&gt;&#10;&#10;      &lt;Spacer /&gt;&#10;&#10;      {isMobile &amp;&amp; &lt;ToolbarSeparator /&gt;}&#10;    &lt;/&gt;&#10;  );&#10;};&#10;&#10;export const MobileToolbarContent = ({&#10;  type,&#10;  onBack,&#10;}: {&#10;  type: &quot;highlighter&quot; | &quot;link&quot;;&#10;  onBack: () =&gt; void;&#10;}) =&gt; (&#10;  &lt;&gt;&#10;    &lt;ToolbarGroup&gt;&#10;      &lt;Button data-style=&quot;ghost&quot; onClick={onBack}&gt;&#10;        &lt;ArrowLeftIcon className=&quot;tiptap-button-icon&quot; /&gt;&#10;        {type === &quot;highlighter&quot; ? (&#10;          &lt;HighlighterIcon className=&quot;tiptap-button-icon&quot; /&gt;&#10;        ) : (&#10;          &lt;LinkIcon className=&quot;tiptap-button-icon&quot; /&gt;&#10;        )}&#10;      &lt;/Button&gt;&#10;    &lt;/ToolbarGroup&gt;&#10;&#10;    &lt;ToolbarSeparator /&gt;&#10;&#10;    {type === &quot;highlighter&quot; ? (&#10;      &lt;ColorHighlightPopoverContent /&gt;&#10;    ) : (&#10;      &lt;LinkContent /&gt;&#10;    )}&#10;  &lt;/&gt;&#10;);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/colab-docs/src/components/tiptap-ui-primitive/button.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/colab-docs/src/components/tiptap-ui-primitive/button.tsx" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/colab-docs/src/components/tiptap-ui-primitive/spacer.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/colab-docs/src/components/tiptap-ui-primitive/spacer.tsx" />
              <option name="updatedContent" value="import * as React from &quot;react&quot;&#10;&#10;export function Spacer() {&#10;  return &lt;div className=&quot;flex-1&quot; /&gt;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/colab-docs/src/components/tiptap-ui-primitive/toolbar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/colab-docs/src/components/tiptap-ui-primitive/toolbar.tsx" />
              <option name="originalContent" value="import * as React from &quot;react&quot;&#10;import { cva } from &quot;class-variance-authority&quot;&#10;&#10;export const toolbarStyles = cva(&#10;  // 原有样式类&#10;  &quot;tiptap-toolbar flex items-center px-1 py-1 border-b border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-950&quot;&#10;)&#10;&#10;export const Toolbar = React.forwardRef&lt;&#10;  HTMLDivElement,&#10;  React.HTMLAttributes&lt;HTMLDivElement&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; {&#10;  return (&#10;    &lt;div&#10;      ref={ref}&#10;      className={`${toolbarStyles()} ${className || ''}`}&#10;      {...props}&#10;    /&gt;&#10;  )&#10;})&#10;Toolbar.displayName = &quot;Toolbar&quot;&#10;&#10;// 添加缺失的 ToolbarGroup 组件&#10;export const ToolbarGroup = React.forwardRef&lt;&#10;  HTMLDivElement,&#10;  React.HTMLAttributes&lt;HTMLDivElement&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; {&#10;  return (&#10;    &lt;div&#10;      ref={ref}&#10;      className={`flex items-center gap-1 ${className || ''}`}&#10;      {...props}&#10;    /&gt;&#10;  )&#10;})&#10;ToolbarGroup.displayName = &quot;ToolbarGroup&quot;&#10;&#10;// 添加缺失的 ToolbarSeparator 组件&#10;export const ToolbarSeparator = React.forwardRef&lt;&#10;  HTMLDivElement,&#10;  React.HTMLAttributes&lt;HTMLDivElement&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; {&#10;  return (&#10;    &lt;div&#10;      ref={ref}&#10;      className={`h-6 w-px bg-slate-200 dark:bg-slate-700 mx-2 ${className || ''}`}&#10;      {...props}&#10;    /&gt;&#10;  )&#10;})&#10;ToolbarSeparator.displayName = &quot;ToolbarSeparator&quot;&#10;" />
              <option name="updatedContent" value="import * as React from &quot;react&quot;&#10;import { cva } from &quot;class-variance-authority&quot;&#10;&#10;export const toolbarStyles = cva(&#10;  // 原有样式类&#10;  &quot;tiptap-toolbar flex flex-nowrap items-center px-1 py-1 overflow-x-auto overflow-y-hidden border-b border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-950&quot;&#10;)&#10;&#10;export const Toolbar = React.forwardRef&lt;&#10;  HTMLDivElement,&#10;  React.HTMLAttributes&lt;HTMLDivElement&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; {&#10;  return (&#10;    &lt;div&#10;      ref={ref}&#10;      className={`${toolbarStyles()} ${className || ''}`}&#10;      {...props}&#10;    /&gt;&#10;  )&#10;})&#10;Toolbar.displayName = &quot;Toolbar&quot;&#10;&#10;// 添加缺失的 ToolbarGroup 组件&#10;export const ToolbarGroup = React.forwardRef&lt;&#10;  HTMLDivElement,&#10;  React.HTMLAttributes&lt;HTMLDivElement&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; {&#10;  return (&#10;    &lt;div&#10;      ref={ref}&#10;      // 子项不收缩，优先产生横向滚动&#10;      className={`flex items-center gap-1 shrink-0 ${className || ''}`}&#10;      {...props}&#10;    /&gt;&#10;  )&#10;})&#10;ToolbarGroup.displayName = &quot;ToolbarGroup&quot;&#10;&#10;// 添加缺失的 ToolbarSeparator 组件&#10;export const ToolbarSeparator = React.forwardRef&lt;&#10;  HTMLDivElement,&#10;  React.HTMLAttributes&lt;HTMLDivElement&gt;&#10;&gt;(({ className, ...props }, ref) =&gt; {&#10;  return (&#10;    &lt;div&#10;      ref={ref}&#10;      className={`h-6 w-px bg-slate-200 dark:bg-slate-700 mx-2 shrink-0 ${className || ''}`}&#10;      {...props}&#10;    /&gt;&#10;  )&#10;})&#10;ToolbarSeparator.displayName = &quot;ToolbarSeparator&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/colab-docs/src/editor.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/colab-docs/src/editor.css" />
              <option name="originalContent" value="@import './styles/_variables.scss';&#10;@import './styles/_keyframe-animations.scss';&#10;&#10;.editor-container {&#10;  display: flex;&#10;  flex-direction: column;&#10;  justify-content: flex-start;&#10;  align-items: center;&#10;  height: 100%;&#10;  width: 100%;&#10;  overflow-x: auto; /* 添加水平滚动 */&#10;}&#10;&#10;/* 确保编辑器内容区域居中 */&#10;.simple-editor-wrapper {&#10;  max-width: 100%;&#10;  width: 100%;&#10;  overflow-x: visible; /* 允许内容超出宽度 */&#10;}&#10;&#10;/* 让外层容器不再限制内部宽度，由 .simple-editor 控制 */&#10;.simple-editor-content {&#10;  /* 原来: max-width: 1200px; */&#10;  max-width: 100%;&#10;  width: 100%;&#10;  margin: 0 auto;&#10;  overflow-x: visible; /* 允许内容超出容器 */&#10;}&#10;&#10;/* 这里的 .simple-editor 是 ProseMirror 本体（由 editorProps.attributes.class 设置） */&#10;.simple-editor {&#10;  max-width: none; /* 移除最大宽度限制，使其填充容器 */&#10;  width: 100%;&#10;  margin: 0; /* 移除居中边距 */&#10;}&#10;&#10;/* 确保ProseMirror内容可以水平滚动 */&#10;&#10;/* 确保代码块等宽内容正确显示 */&#10;.simple-editor pre {&#10;  white-space: pre;&#10;  overflow-x: auto;&#10;}&#10;&#10;/* 确保表格可以水平滚动 */&#10;.simple-editor table {&#10;  overflow-x: auto;&#10;  display: block;&#10;}&#10;&#10;/* 工具栏滚动条与滚动行为 */&#10;.tiptap-toolbar {&#10;  overflow-x: auto;      /* 启用横向滚动 */&#10;  overflow-y: hidden;&#10;  -webkit-overflow-scrolling: touch;&#10;  white-space: nowrap;   /* 非 flex 环境下兜底不换行 */&#10;&#10;  scrollbar-width: thin; /* Firefox */&#10;  /* Webkit浏览器 */&#10;  &amp;::-webkit-scrollbar {&#10;    width: 4px;&#10;    height: 4px;&#10;    opacity: 0;&#10;    transition: opacity 0.3s ease;&#10;  }&#10;&#10;  &amp;::-webkit-scrollbar-track {&#10;    background: transparent;&#10;  }&#10;&#10;  &amp;::-webkit-scrollbar-thumb {&#10;    background-color: rgba(0, 0, 0, 0.2);&#10;    border-radius: 10px;&#10;  }&#10;&#10;  &amp;::-webkit-scrollbar-thumb {&#10;    opacity: 0;&#10;  }&#10;&#10;  &amp;:hover::-webkit-scrollbar-thumb {&#10;    opacity: 1;&#10;  }&#10;&#10;  /* 暗色模式适配 */&#10;  .dark &amp; {&#10;    &amp;::-webkit-scrollbar-thumb {&#10;      background-color: rgba(255, 255, 255, 0.2);&#10;    }&#10;  }&#10;}&#10;&#10;/* 工具栏子项不收缩，避免被挤压；让容器产生滚动 */&#10;.tiptap-toolbar &gt; * {&#10;  flex-shrink: 0;&#10;}&#10;&#10;/* 固定工具栏样式 */&#10;.fixed-toolbar {&#10;  padding: 4px 8px;&#10;  box-shadow: 0 1px 3px rgba(0,0,0,0.1);&#10;  width: 100%;&#10;  z-index: 100;&#10;  pointer-events: auto !important;&#10;  position: relative;&#10;}&#10;&#10;.tiptap-toolbar button {&#10;  pointer-events: auto !important;&#10;  position: relative;&#10;  z-index: 101;&#10;}&#10;&#10;/* 目录侧边栏样式 */&#10;.toc-sidebar {&#10;  transition: width 0.3s ease;&#10;  overflow: hidden;&#10;}&#10;&#10;.toc-toggle-btn {&#10;  transition: margin-left 0.3s ease;&#10;}&#10;&#10;/* 目录列表项样式 */&#10;.toc-list {&#10;  list-style: none;&#10;  padding: 0;&#10;  margin: 0;&#10;}&#10;&#10;.toc-item {&#10;  transition: all 0.2s ease;&#10;  padding-left: 10px;&#10;  border-left: 2px solid transparent;&#10;}&#10;&#10;.toc-item:hover {&#10;  background-color: rgba(0, 0, 0, 0.03);&#10;  color: #1890ff;&#10;}&#10;&#10;.active-toc-item {&#10;  background-color: rgba(24, 144, 255, 0.05);&#10;  color: #1890ff;&#10;  border-left-color: #1890ff;&#10;  font-weight: 500;&#10;}&#10;" />
              <option name="updatedContent" value="@import './styles/_variables.scss';&#10;@import './styles/_keyframe-animations.scss';&#10;&#10;.editor-container {&#10;  display: flex;&#10;  flex-direction: column;&#10;  justify-content: flex-start;&#10;  align-items: center;&#10;  height: 100%;&#10;  width: 100%;&#10;  overflow-x: auto; /* 添加水平滚动 */&#10;}&#10;&#10;/* 确保编辑器内容区域居中 */&#10;.simple-editor-wrapper {&#10;  max-width: 100%;&#10;  width: 100%;&#10;  overflow-x: visible; /* 允许内容超出宽度 */&#10;}&#10;&#10;/* 让外层容器不再限制内部宽度，由 .simple-editor 控制 */&#10;.simple-editor-content {&#10;  max-width: 1400px; /* 将最大宽度增加到1400px，使其更宽 */&#10;  width: 100%;&#10;  margin: 0 auto; /* 保持内容块在容器中居中 */&#10;  padding: 0 2rem; /* 为内容添加舒适的左右内边距 */&#10;  overflow-x: visible; /* 允许内容超出容器 */&#10;}&#10;&#10;/* 这里的 .simple-editor 是 ProseMirror 本体（由 editorProps.attributes.class 设置） */&#10;.simple-editor {&#10;  max-width: none; /* 移除最大宽度限制，使其填充容器 */&#10;  width: 100%;&#10;  margin: 0; /* 移除居中边距 */&#10;}&#10;&#10;/* 确保ProseMirror内容可以水平滚动 */&#10;.simple-editor .ProseMirror {&#10;  overflow-x: auto; /* 添加水平滚动条 */&#10;  padding-bottom: 10px; /* 为滚动条留出空间 */&#10;}&#10;&#10;/* 确保代码块等宽内容正确显示 */&#10;.simple-editor pre {&#10;  white-space: pre;&#10;  overflow-x: auto;&#10;}&#10;&#10;/* 确保表格可以水平滚动 */&#10;.simple-editor table {&#10;  overflow-x: auto;&#10;  display: block;&#10;}&#10;&#10;/* 工具栏滚动条与滚动行为 */&#10;.tiptap-toolbar {&#10;  overflow-x: auto;      /* 启用横向滚动 */&#10;  overflow-y: hidden;&#10;  -webkit-overflow-scrolling: touch;&#10;  white-space: nowrap;   /* 非 flex 环境下兜底不换行 */&#10;&#10;  scrollbar-width: thin; /* Firefox */&#10;  /* Webkit浏览器 */&#10;  &amp;::-webkit-scrollbar {&#10;    width: 4px;&#10;    height: 4px;&#10;    opacity: 0;&#10;    transition: opacity 0.3s ease;&#10;  }&#10;&#10;  &amp;::-webkit-scrollbar-track {&#10;    background: transparent;&#10;  }&#10;&#10;  &amp;::-webkit-scrollbar-thumb {&#10;    background-color: rgba(0, 0, 0, 0.2);&#10;    border-radius: 10px;&#10;  }&#10;&#10;  &amp;::-webkit-scrollbar-thumb {&#10;    opacity: 0;&#10;  }&#10;&#10;  &amp;:hover::-webkit-scrollbar-thumb {&#10;    opacity: 1;&#10;  }&#10;&#10;  /* 暗色模式适配 */&#10;  .dark &amp; {&#10;    &amp;::-webkit-scrollbar-thumb {&#10;      background-color: rgba(255, 255, 255, 0.2);&#10;    }&#10;  }&#10;}&#10;&#10;/* 工具栏子项不收缩，避免被挤压；让容器产生滚动 */&#10;.tiptap-toolbar &gt; * {&#10;  flex-shrink: 0;&#10;}&#10;&#10;/* 固定工具栏样式 */&#10;.fixed-toolbar {&#10;  padding: 4px 8px;&#10;  box-shadow: 0 1px 3px rgba(0,0,0,0.1);&#10;  width: 100%;&#10;  z-index: 100;&#10;  pointer-events: auto !important;&#10;  position: relative;&#10;}&#10;&#10;.tiptap-toolbar button {&#10;  pointer-events: auto !important;&#10;  position: relative;&#10;  z-index: 101;&#10;}&#10;&#10;/* 目录侧边栏样式 */&#10;.toc-sidebar {&#10;  transition: width 0.3s ease;&#10;  overflow: hidden;&#10;}&#10;&#10;.toc-toggle-btn {&#10;  transition: margin-left 0.3s ease;&#10;}&#10;&#10;/* 目录列表项样式 */&#10;.toc-list {&#10;  list-style: none;&#10;  padding: 0;&#10;  margin: 0;&#10;}&#10;&#10;.toc-item {&#10;  transition: all 0.2s ease;&#10;  padding-left: 10px;&#10;  border-left: 2px solid transparent;&#10;}&#10;&#10;.toc-item:hover {&#10;  background-color: rgba(0, 0, 0, 0.03);&#10;  color: #1890ff;&#10;}&#10;&#10;.active-toc-item {&#10;  background-color: rgba(24, 144, 255, 0.05);&#10;  color: #1890ff;&#10;  border-left-color: #1890ff;&#10;  font-weight: 500;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/colab-docs/src/pages/Auth/callback.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/colab-docs/src/pages/Auth/callback.tsx" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/colab-docs/src/pages/Doc/_components/DocumentSidebar/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/colab-docs/src/pages/Doc/_components/DocumentSidebar/index.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { useEffect, useState, useRef } from 'react';&#10;&#10;// 导入各个tab组件&#10;//import Folder from './folder';&#10;&#10;import { useSidebar } from '@/stores/sidebarStore';&#10;//import { Surface } from '@/components/ui/Surface';&#10;import { Card } from 'antd';&#10;&#10;// 添加接收宽度状态的props接口&#10;interface DocumentSidebarProps {&#10;  width: number;&#10;  onWidthChange: (width: number) =&gt; void;&#10;}&#10;&#10;function DocumentSidebar({ width, onWidthChange }: DocumentSidebarProps) {&#10;  const { isOpen} = useSidebar();&#10;  const [isResizing, setIsResizing] = useState(false);&#10;  const sidebarRef = useRef&lt;HTMLDivElement&gt;(null);&#10;&#10;  // 拖拽调整宽度&#10;  useEffect(() =&gt; {&#10;    const handleMouseMove = (e: MouseEvent) =&gt; {&#10;      if (!isResizing) return;&#10;&#10;      const newWidth = Math.max(280, Math.min(500, e.clientX));&#10;      onWidthChange(newWidth);&#10;    };&#10;&#10;    const handleMouseUp = () =&gt; {&#10;      setIsResizing(false);&#10;    };&#10;&#10;    if (isResizing) {&#10;      document.addEventListener('mousemove', handleMouseMove);&#10;      document.addEventListener('mouseup', handleMouseUp);&#10;      document.body.style.cursor = 'col-resize';&#10;      document.body.style.userSelect = 'none';&#10;    }&#10;&#10;    return () =&gt; {&#10;      document.removeEventListener('mousemove', handleMouseMove);&#10;      document.removeEventListener('mouseup', handleMouseUp);&#10;      document.body.style.cursor = '';&#10;      document.body.style.userSelect = '';&#10;    };&#10;  }, [isResizing, onWidthChange]);&#10;&#10;  if (!isOpen) {&#10;    return null;&#10;  }&#10;&#10;  return (&#10;    &lt;div&#10;      ref={sidebarRef}&#10;      className=&quot;flex h-full relative bg-gradient-to-br from-slate-50 via-blue-50/30 to-indigo-50/50 dark:from-slate-900 dark:via-slate-800/90 dark:to-slate-900 shadow-2xl shadow-slate-200/30 dark:shadow-slate-900/50 backdrop-blur-xl&quot;&#10;      style={{ width: `${width}px` }}&#10;    &gt;&#10;&#10;      {/* 左侧内容区域 */}&#10;      &lt;div className=&quot;flex-1 h-full overflow-hidden relative bg-gradient-to-br from-white/95 via-slate-50/60 to-white/95 dark:from-slate-800/95 dark:via-slate-800/70 dark:to-slate-800/95 backdrop-blur-lg before:absolute before:left-0 before:top-0 before:bottom-0 before:w-4 before:bg-gradient-to-r before:from-slate-900/5 before:to-transparent dark:before:from-slate-900/20 before:pointer-events-none&quot;&gt;&#10;        &lt;Card&#10;          className=&quot;h-full overflow-hidden rounded-2xl&quot;&#10;        &gt;&#10;          文件列表&#10;        &lt;/Card&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* 右侧拖拽调整条 */}&#10;      &lt;div&#10;        className=&quot;absolute -right-1 top-0 bottom-0 w-2 cursor-col-resize hover:bg-blue-500/20 transition-colors&quot;&#10;        onMouseDown={() =&gt; setIsResizing(true)}&#10;      /&gt;&#10;&#10;      {/* 整体右侧柔和阴影 */}&#10;      &lt;div className=&quot;absolute -right-4 top-0 bottom-0 w-4 pointer-events-none bg-gradient-to-r from-slate-900/10 to-transparent dark:from-slate-900/30&quot; /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default DocumentSidebar;&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import { useRef } from 'react';&#10;import { useSidebar } from '@/stores/sidebarStore';&#10;import { Card } from 'antd';&#10;&#10;// 移除宽度相关props接口&#10;function DocumentSidebar() {&#10;  const { isOpen } = useSidebar();&#10;  const sidebarRef = useRef&lt;HTMLDivElement&gt;(null);&#10;&#10;  // 移除所有拖拽调整宽度相关代码&#10;&#10;  if (!isOpen) {&#10;    return null;&#10;  }&#10;&#10;  return (&#10;    &lt;div&#10;      ref={sidebarRef}&#10;      className=&quot;flex h-full relative bg-gradient-to-br from-slate-50 via-blue-50/30 to-indigo-50/50 dark:from-slate-900 dark:via-slate-800/90 dark:to-slate-900 shadow-2xl shadow-slate-200/30 dark:shadow-slate-900/50 backdrop-blur-xl&quot;&#10;      style={{ width: '280px' }} // 固定宽度为280px&#10;    &gt;&#10;      {/* 左侧内容区域 */}&#10;      &lt;div className=&quot;flex-1 h-full overflow-hidden relative bg-gradient-to-br from-white/95 via-slate-50/60 to-white/95 dark:from-slate-800/95 dark:via-slate-800/70 dark:to-slate-800/95 backdrop-blur-lg before:absolute before:left-0 before:top-0 before:bottom-0 before:w-4 before:bg-gradient-to-r before:from-slate-900/5 before:to-transparent dark:before:from-slate-900/20 before:pointer-events-none&quot;&gt;&#10;        &lt;Card&#10;          className=&quot;h-full overflow-hidden rounded-2xl&quot;&#10;        &gt;&#10;          文件列表&#10;        &lt;/Card&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* 整体右侧柔和阴影 */}&#10;      &lt;div className=&quot;absolute -right-4 top-0 bottom-0 w-4 pointer-events-none bg-gradient-to-r from-slate-900/10 to-transparent dark:from-slate-900/30&quot; /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default DocumentSidebar;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/colab-docs/src/pages/Doc/index.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/colab-docs/src/pages/Doc/index.tsx" />
              <option name="originalContent" value="import { Suspense, useRef, useState } from 'react'&#10;import DocumentSidebar from './_components/DocumentSidebar'&#10;import Editor from '@/Editor'&#10;import { Card } from 'antd'&#10;import { Editor as TiptapEditor, EditorContext } from '@tiptap/react'&#10;import { Toolbar } from '@/components/tiptap-ui-primitive/toolbar'&#10;import {&#10;  MainToolbarContent,&#10;} from '@/components/tiptap-templates/simple/toolbar-content'&#10;&#10;// 优化的加载组件 - 与 TabSidebar 保持一致的样式&#10;function SidebarSkeleton () {&#10;  return (&#10;    &lt;div&#10;      className=&quot;flex h-full relative bg-gradient-to-br from-slate-50 via-blue-50/30 to-indigo-50/50 dark:from-slate-900 dark:via-slate-800/90 dark:to-slate-900 shadow-2xl shadow-slate-200/30 dark:shadow-slate-900/50 backdrop-blur-xl&quot;&#10;      style={{ width: '280px' }} // 固定宽度为280px&#10;    &gt;&#10;      {/* 左侧图标栏骨架 */}&#10;      &lt;div&#10;        className=&quot;w-16 relative bg-gradient-to-b from-white/90 via-white/70 to-white/90 dark:from-slate-800/90 dark:via-slate-800/70 dark:to-slate-800/90 backdrop-blur-lg flex flex-col items-center py-4 after:absolute after:right-0 after:top-4 after:bottom-4 after:w-px after:bg-gradient-to-b after:from-transparent after:via-slate-200/50 after:to-transparent dark:after:via-slate-600/30&quot;&gt;&#10;        {/* Logo骨架 */}&#10;        &lt;div&#10;          className=&quot;w-10 h-10 bg-gradient-to-br from-blue-400/20 to-indigo-400/20 rounded-2xl animate-pulse mb-6&quot;/&gt;&#10;&#10;        {/* 按钮骨架 */}&#10;        &lt;div className=&quot;space-y-2 flex-1&quot;&gt;&#10;          {Array.from({ length: 5 }).map((_, i) =&gt; (&#10;            &lt;div&#10;              key={i}&#10;              className=&quot;w-12 h-12 bg-white/60 dark:bg-slate-700/60 rounded-2xl animate-pulse backdrop-blur-md border border-slate-200/50 dark:border-slate-600/50&quot;&#10;              style={{ animationDelay: `${i * 100}ms` }}&#10;            /&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;&#10;        {/* 底部按钮骨架 */}&#10;        &lt;div&#10;          className=&quot;w-12 h-12 bg-white/60 dark:bg-slate-700/60 rounded-2xl animate-pulse backdrop-blur-md border border-slate-200/50 dark:border-slate-600/50&quot;/&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* 右侧内容区骨架 */}&#10;      &lt;div&#10;        className=&quot;flex-1 overflow-hidden relative bg-gradient-to-br from-white/95 via-slate-50/60 to-white/95 dark:from-slate-800/95 dark:via-slate-800/70 dark:to-slate-800/95 backdrop-blur-lg before:absolute before:left-0 before:top-0 before:bottom-0 before:w-4 before:bg-gradient-to-r before:from-slate-900/5 before:to-transparent dark:before:from-slate-900/20 before:pointer-events-none&quot;&gt;&#10;        &lt;div className=&quot;h-full overflow-hidden flex flex-col&quot;&gt;&#10;          {/* 标题栏骨架 */}&#10;          &lt;header&#10;            className=&quot;flex items-center justify-between px-5 py-4 relative bg-gradient-to-r from-white/95 via-slate-50/80 to-white/95 dark:from-slate-800/95 dark:via-slate-700/80 dark:to-slate-800/95 backdrop-blur-xl after:absolute after:bottom-0 after:left-4 after:right-4 after:h-px after:bg-gradient-to-r after:from-transparent after:via-slate-200/60 after:to-transparent dark:after:via-slate-600/40&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;              &lt;div&#10;                className=&quot;w-8 h-8 bg-gradient-to-br from-blue-400/20 to-indigo-400/20 rounded-xl animate-pulse&quot;/&gt;&#10;              &lt;div&#10;                className=&quot;h-4 w-16 bg-slate-200/60 dark:bg-slate-600/60 rounded-md animate-pulse&quot;/&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;              &lt;div&#10;                className=&quot;h-3 w-10 bg-slate-200/60 dark:bg-slate-600/60 rounded animate-pulse&quot;/&gt;&#10;              &lt;div&#10;                className=&quot;w-8 h-8 bg-white/60 dark:bg-slate-700/60 rounded-xl animate-pulse&quot;/&gt;&#10;            &lt;/div&gt;&#10;          &lt;/header&gt;&#10;&#10;          {/* 内容区骨架 */}&#10;          &lt;div className=&quot;flex-1 overflow-auto p-4 space-y-4&quot;&gt;&#10;            &lt;div&#10;              className=&quot;h-6 bg-slate-200/60 dark:bg-slate-600/60 rounded-lg animate-pulse w-3/4&quot;/&gt;&#10;            &lt;div className=&quot;space-y-3&quot;&gt;&#10;              {Array.from({ length: 8 }).map((_, i) =&gt; (&#10;                &lt;div&#10;                  key={i}&#10;                  className=&quot;h-5 bg-slate-200/60 dark:bg-slate-600/60 rounded-md animate-pulse&quot;&#10;                  style={{&#10;                    width: `${60 + ((i * 7) % 30)}%`,&#10;                    animationDelay: `${i * 150}ms`,&#10;                  }}&#10;                /&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* 整体右侧柔和阴影 */}&#10;      &lt;div&#10;        className=&quot;absolute -right-4 top-0 bottom-0 w-4 pointer-events-none bg-gradient-to-r from-slate-900/10 to-transparent dark:from-slate-900/30&quot;/&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;&#10;export default function Doc () {&#10;  const mainRef = useRef&lt;HTMLDivElement&gt;(null)&#10;  const [editor, setEditor] = useState&lt;TiptapEditor | null&gt;(null)&#10;  const [isTocVisible, setIsTocVisible] = useState(false)&#10;  const documentId = 'example-doc'&#10;&#10;  return (&#10;    &lt;div className=&quot;flex h-screen bg-white dark:bg-slate-900 overflow-hidden&quot;&gt;&#10;      {/* 侧边栏区域 - 固定宽度设计 */}&#10;      &lt;Suspense fallback={&lt;SidebarSkeleton/&gt;}&gt;&#10;        &lt;DocumentSidebar/&gt;&#10;      &lt;/Suspense&gt;&#10;&#10;      {/* 主内容区域 */}&#10;      &lt;main&#10;        ref={mainRef}&#10;        className=&quot;flex-1 flex flex-col bg-white dark:bg-slate-900 relative min-w-0 overflow-hidden&quot;&gt;&#10;        {/* 顶部工具栏（保持不变，已注入 EditorContext） */}&#10;        &lt;div&#10;          className=&quot;sticky top-0 z-50 w-full border-b border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-950&quot;&gt;&#10;          {/* 将顶部工具栏放入 EditorContext，提供 editor 实例 */}&#10;          &lt;EditorContext.Provider value={{ editor }}&gt;&#10;            &lt;Toolbar&#10;              className=&quot;tiptap-toolbar fixed-toolbar pointer-events-auto&quot;&gt;&#10;              {editor &amp;&amp; (&#10;                &lt;MainToolbarContent&#10;                  editor={editor}&#10;                  isTocVisible={isTocVisible}&#10;                  onToggleToc={() =&gt; setIsTocVisible(!isTocVisible)}&#10;                /&gt;&#10;              )}&#10;            &lt;/Toolbar&gt;&#10;          &lt;/EditorContext.Provider&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* 左侧柔和分隔阴影 */}&#10;        &lt;div&#10;          className=&quot;absolute left-0 top-0 bottom-0 w-6 bg-gradient-to-r from-slate-900/5 to-transparent dark:from-slate-900/20 pointer-events-none z-10&quot;/&gt;&#10;&#10;        &lt;div className=&quot;w-full h-full flex-1&quot;&gt;&#10;          &lt;Card&#10;            className=&quot;h-full overflow-hidden rounded-2xl&quot;&#10;          &gt;&#10;            &lt;Editor&#10;              isTocVisible={isTocVisible}&#10;              onEditorReady={setEditor}&#10;              documentId={documentId}&#10;            /&gt;&#10;          &lt;/Card&gt;&#10;        &lt;/div&gt;&#10;      &lt;/main&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}" />
              <option name="updatedContent" value="import { Suspense, useRef, useState } from 'react'&#10;import DocumentSidebar from './_components/DocumentSidebar'&#10;import Editor from '@/Editor'&#10;import { Card } from 'antd'&#10;import { Editor as TiptapEditor, EditorContext } from '@tiptap/react'&#10;import { Toolbar } from '@/components/tiptap-ui-primitive/toolbar'&#10;import {&#10;  MainToolbarContent,&#10;} from '@/components/tiptap-templates/simple/toolbar-content'&#10;&#10;// 优化的加载组件 - 与 TabSidebar 保持一致的样式&#10;function SidebarSkeleton () {&#10;  return (&#10;    &lt;div&#10;      className=&quot;flex h-full relative bg-gradient-to-br from-slate-50 via-blue-50/30 to-indigo-50/50 dark:from-slate-900 dark:via-slate-800/90 dark:to-slate-900 shadow-2xl shadow-slate-200/30 dark:shadow-slate-900/50 backdrop-blur-xl&quot;&#10;      style={{ width: '280px' }} // 固定宽度为280px&#10;    &gt;&#10;      {/* 左侧图标栏骨架 */}&#10;      &lt;div&#10;        className=&quot;w-16 relative bg-gradient-to-b from-white/90 via-white/70 to-white/90 dark:from-slate-800/90 dark:via-slate-800/70 dark:to-slate-800/90 backdrop-blur-lg flex flex-col items-center py-4 after:absolute after:right-0 after:top-4 after:bottom-4 after:w-px after:bg-gradient-to-b after:from-transparent after:via-slate-200/50 after:to-transparent dark:after:via-slate-600/30&quot;&gt;&#10;        {/* Logo骨架 */}&#10;        &lt;div&#10;          className=&quot;w-10 h-10 bg-gradient-to-br from-blue-400/20 to-indigo-400/20 rounded-2xl animate-pulse mb-6&quot;/&gt;&#10;&#10;        {/* 按钮骨架 */}&#10;        &lt;div className=&quot;space-y-2 flex-1&quot;&gt;&#10;          {Array.from({ length: 5 }).map((_, i) =&gt; (&#10;            &lt;div&#10;              key={i}&#10;              className=&quot;w-12 h-12 bg-white/60 dark:bg-slate-700/60 rounded-2xl animate-pulse backdrop-blur-md border border-slate-200/50 dark:border-slate-600/50&quot;&#10;              style={{ animationDelay: `${i * 100}ms` }}&#10;            /&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;&#10;        {/* 底部按钮骨架 */}&#10;        &lt;div&#10;          className=&quot;w-12 h-12 bg-white/60 dark:bg-slate-700/60 rounded-2xl animate-pulse backdrop-blur-md border border-slate-200/50 dark:border-slate-600/50&quot;/&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* 右侧内容区骨架 */}&#10;      &lt;div&#10;        className=&quot;flex-1 overflow-hidden relative bg-gradient-to-br from-white/95 via-slate-50/60 to-white/95 dark:from-slate-800/95 dark:via-slate-800/70 dark:to-slate-800/95 backdrop-blur-lg before:absolute before:left-0 before:top-0 before:bottom-0 before:w-4 before:bg-gradient-to-r before:from-slate-900/5 before:to-transparent dark:before:from-slate-900/20 before:pointer-events-none&quot;&gt;&#10;        &lt;div className=&quot;h-full overflow-hidden flex flex-col&quot;&gt;&#10;          {/* 标题栏骨架 */}&#10;          &lt;header&#10;            className=&quot;flex items-center justify-between px-5 py-4 relative bg-gradient-to-r from-white/95 via-slate-50/80 to-white/95 dark:from-slate-800/95 dark:via-slate-700/80 dark:to-slate-800/95 backdrop-blur-xl after:absolute after:bottom-0 after:left-4 after:right-4 after:h-px after:bg-gradient-to-r after:from-transparent after:via-slate-200/60 after:to-transparent dark:after:via-slate-600/40&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;              &lt;div&#10;                className=&quot;w-8 h-8 bg-gradient-to-br from-blue-400/20 to-indigo-400/20 rounded-xl animate-pulse&quot;/&gt;&#10;              &lt;div&#10;                className=&quot;h-4 w-16 bg-slate-200/60 dark:bg-slate-600/60 rounded-md animate-pulse&quot;/&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;              &lt;div&#10;                className=&quot;h-3 w-10 bg-slate-200/60 dark:bg-slate-600/60 rounded animate-pulse&quot;/&gt;&#10;              &lt;div&#10;                className=&quot;w-8 h-8 bg-white/60 dark:bg-slate-700/60 rounded-xl animate-pulse&quot;/&gt;&#10;            &lt;/div&gt;&#10;          &lt;/header&gt;&#10;&#10;          {/* 内容区骨架 */}&#10;          &lt;div className=&quot;flex-1 overflow-auto p-4 space-y-4&quot;&gt;&#10;            &lt;div&#10;              className=&quot;h-6 bg-slate-200/60 dark:bg-slate-600/60 rounded-lg animate-pulse w-3/4&quot;/&gt;&#10;            &lt;div className=&quot;space-y-3&quot;&gt;&#10;              {Array.from({ length: 8 }).map((_, i) =&gt; (&#10;                &lt;div&#10;                  key={i}&#10;                  className=&quot;h-5 bg-slate-200/60 dark:bg-slate-600/60 rounded-md animate-pulse&quot;&#10;                  style={{&#10;                    width: `${60 + ((i * 7) % 30)}%`,&#10;                    animationDelay: `${i * 150}ms`,&#10;                  }}&#10;                /&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* 整体右侧柔和阴影 */}&#10;      &lt;div&#10;        className=&quot;absolute -right-4 top-0 bottom-0 w-4 pointer-events-none bg-gradient-to-r from-slate-900/10 to-transparent dark:from-slate-900/30&quot;/&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;&#10;export default function Doc () {&#10;  const mainRef = useRef&lt;HTMLDivElement&gt;(null)&#10;  const [editor, setEditor] = useState&lt;TiptapEditor | null&gt;(null)&#10;  const [isTocVisible, setIsTocVisible] = useState(false)&#10;  const documentId = 'example-doc'&#10;&#10;  return (&#10;    &lt;div className=&quot;flex h-screen bg-white dark:bg-slate-900 overflow-hidden&quot;&gt;&#10;      {/* 侧边栏区域 - 固定宽度设计 */}&#10;      &lt;Suspense fallback={&lt;SidebarSkeleton/&gt;}&gt;&#10;        &lt;DocumentSidebar/&gt;&#10;      &lt;/Suspense&gt;&#10;&#10;      {/* 主内容区域 */}&#10;      &lt;main&#10;        ref={mainRef}&#10;        className=&quot;flex-1 flex flex-col bg-white dark:bg-slate-900 relative min-w-0 overflow-hidden&quot;&gt;&#10;        {/* 顶部工具栏（保持不变，已注入 EditorContext） */}&#10;        &lt;div&#10;          className=&quot;sticky top-0 z-50 w-full border-b border-slate-200 dark:border-slate-700 bg-white dark:bg-slate-950&quot;&gt;&#10;          {/* 将顶部工具栏放入 EditorContext，提供 editor 实例 */}&#10;          &lt;EditorContext.Provider value={{ editor }}&gt;&#10;            &lt;Toolbar&#10;              className=&quot;tiptap-toolbar fixed-toolbar pointer-events-auto&quot;&gt;&#10;              {editor &amp;&amp; (&#10;                &lt;MainToolbarContent&#10;                  editor={editor}&#10;                  isTocVisible={isTocVisible}&#10;                  onToggleToc={() =&gt; setIsTocVisible(!isTocVisible)}&#10;                /&gt;&#10;              )}&#10;            &lt;/Toolbar&gt;&#10;          &lt;/EditorContext.Provider&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* 左侧柔和分隔阴影 */}&#10;        &lt;div&#10;          className=&quot;absolute left-0 top-0 bottom-0 w-6 bg-gradient-to-r from-slate-900/5 to-transparent dark:from-slate-900/20 pointer-events-none z-10&quot;/&gt;&#10;&#10;        &lt;div className=&quot;w-full h-full flex-1&quot;&gt;&#10;          &lt;Card&#10;            className=&quot;h-full overflow-hidden rounded-2xl&quot;&#10;          &gt;&#10;            &lt;Editor&#10;              isTocVisible={isTocVisible}&#10;              onEditorReady={setEditor}&#10;              documentId={documentId}&#10;            /&gt;&#10;          &lt;/Card&gt;&#10;        &lt;/div&gt;&#10;      &lt;/main&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/mouse-cursor-effect.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/mouse-cursor-effect.html" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/node-oauth-demo/routes/githubOauth.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/node-oauth-demo/routes/githubOauth.js" />
              <option name="updatedContent" value="const Router = require('@koa/router')&#10;const axios = require('axios')&#10;const router = new Router()&#10;&#10;// Fill in your client ID and client secret that you obtained&#10;// while registering the application&#10;const clientID = '7e015d8ce32370079895'&#10;const clientSecret = '2b976af0e6b6ceea2b1554aa31d1fe94ea692cd9'&#10;&#10;router.get('/oauth/redirect', async ctx =&gt; {&#10;  const requestToken = ctx.request.query.code&#10;  console.log('authorization code:', requestToken)&#10;&#10;  const tokenResponse = await axios({&#10;    method: 'post',&#10;    url: 'https://github.com/login/oauth/access_token?' +&#10;         `client_id=${clientID}&amp;` +&#10;         `client_secret=${clientSecret}&amp;` +&#10;         `code=${requestToken}`,&#10;    headers: {&#10;      accept: 'application/json',&#10;    },&#10;  })&#10;&#10;  const accessToken = tokenResponse.data.access_token&#10;  const data = tokenResponse.data&#10;  console.log('token response:', data)&#10;  console.log(`access token: ${accessToken}`)&#10;&#10;  const result = await axios({&#10;    method: 'get',&#10;    url: `https://api.github.com/user`,&#10;    headers: {&#10;      accept: 'application/json',&#10;      Authorization: `token ${accessToken}`,&#10;    },&#10;  })&#10;  console.log(result.data)&#10;  const name = result.data.name&#10;&#10;  ctx.response.redirect(`/welcome.html?name=${name}`)&#10;})&#10;&#10;module.exports = router&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/server/app.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/server/app.js" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/server/hocuspocus/server.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/server/hocuspocus/server.js" />
              <option name="originalContent" value="const { logger } = require('../utils/logger.js')&#10;const { ws_port } = require('../base.config.js')&#10;&#10;// 使用动态 import 以在 CommonJS 中加载可能为 ESM-only 的依赖&#10;async function createHocuspocusServer () {&#10;  const { Server } = await import('@hocuspocus/server')&#10;  const { Database } = await import('@hocuspocus/extension-database')&#10;  // 兼容 CJS（default）与 ESM 两种导出&#10;  const loggerAdapterModule = await import('./loggerAdapter.js')&#10;  const { createLoggerExtension } = loggerAdapterModule.default || loggerAdapterModule&#10;&#10;  return new Server({&#10;    port: ws_port, // 使用配置端口，避免与前端不一致&#10;    extensions: [&#10;      // 使用自定义日志扩展代替官方 Logger&#10;      createLoggerExtension(),&#10;&#10;      // 数据库扩展&#10;      new Database({&#10;        type: 'memory',&#10;        // 其他数据库配置&#10;      }),&#10;    ],&#10;    // 身份验证&#10;    async onAuthenticate ({ token }) {&#10;      if (!token) {&#10;        logger.warn('身份验证失败: 无 token')&#10;        return {&#10;          user: { id: 'anonymous', name: '匿名用户' },&#10;        }&#10;      }&#10;&#10;      try {&#10;        // 实际的 token 验证逻辑&#10;        // ...&#10;&#10;        logger.debug('身份验证成功')&#10;        return {&#10;          user: { id: 'user-id', name: 'Username' },&#10;        }&#10;      } catch (error) {&#10;        logger.error('身份验证错误', error)&#10;        throw new Error('无效的访问令牌')&#10;      }&#10;    },&#10;&#10;    // 文档存储&#10;    async onStoreDocument (data) {&#10;      logger.debug(`文档 ${data.documentName} 已存储`)&#10;      // 额外的存储逻辑&#10;    },&#10;  })&#10;}&#10;&#10;module.exports = { createHocuspocusServer }&#10;" />
              <option name="updatedContent" value="const { logger } = require('../utils/logger.js')&#10;const { ws_port } = require('../base.config.js')&#10;&#10;// 使用动态 import 以在 CommonJS 中加载可能为 ESM-only 的依赖&#10;async function createHocuspocusServer () {&#10;  const { Server } = await import('@hocuspocus/server')&#10;  const { Database } = await import('@hocuspocus/extension-database')&#10;  // 兼容 CJS（default）与 ESM 两种导出&#10;  const loggerAdapterModule = await import('./loggerAdapter.js')&#10;  const { createLoggerExtension } = loggerAdapterModule.default || loggerAdapterModule&#10;&#10;  return new Server({&#10;    port: ws_port, // 使用配置端口，避免与前端不一致&#10;    extensions: [&#10;      // 使用自定义日志扩展代替官方 Logger&#10;      createLoggerExtension(),&#10;&#10;      // 数据库扩展&#10;      new Database({&#10;        type: 'memory',&#10;        // 其他数据库配置&#10;      }),&#10;    ],&#10;    // 身份验证&#10;    async onAuthenticate ({ token }) {&#10;      if (!token) {&#10;        logger.warn('身份验证失败: 无 token')&#10;        return {&#10;          user: { id: 'anonymous', name: '匿名用户' },&#10;        }&#10;      }&#10;&#10;      try {&#10;        // 实际的 token 验证逻辑&#10;        // ...&#10;&#10;        logger.debug('身份验证成功')&#10;        return {&#10;          user: { id: 'user-id', name: 'Username' },&#10;        }&#10;      } catch (error) {&#10;        logger.error('身份验证错误', error)&#10;        throw new Error('无效的访问令牌')&#10;      }&#10;    },&#10;&#10;    // 文档存储&#10;    async onStoreDocument (data) {&#10;      logger.debug(`文档 ${data.documentName} 已存储`)&#10;      // 额外的存储逻辑&#10;    },&#10;  })&#10;}&#10;&#10;module.exports = { createHocuspocusServer }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>